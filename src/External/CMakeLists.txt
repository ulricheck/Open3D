if (Open3D_USE_NATIVE_DEPENDENCY_BUILD)
	message(STATUS "Finding dependencies of Open3D")
	message(STATUS "Dependencies are built from source if they are not found in the system")
	find_package(GLEW)
	if (GLEW_FOUND)
	    message(STATUS "Use native build of GLEW")
	else (GLEW_FOUND)
		message(STATUS "Build GLEW from source")
		add_subdirectory(glew)
	endif (GLEW_FOUND)

	find_package(PkgConfig)
	if (PKGCONFIG_FOUND)

		# Eigen 3.2.7 version is required for pybind11 included in Open3D
		pkg_check_modules(EIGEN3 eigen3>=3.2.7)
		if (EIGEN3_FOUND)
			message(STATUS "Use native eigen3")
		else (EIGEN3_FOUND)
			message(STATUS "Use eigen3 included in Open3D")
			set(EIGEN3_INCLUDE_DIRS "${Open3D_SOURCE_DIR}/External/Eigen")
		endif (EIGEN3_FOUND)

		pkg_search_module(JPEG libjpeg)
		if (JPEG_FOUND)
				message(STATUS "Use native build of libjpeg")
		else (JPEG_FOUND)
			message(STATUS "Build libjpeg from source")
			add_subdirectory(libjpeg)
		endif (JPEG_FOUND)

		pkg_search_module(PNG libpng>=1.6.0)
		if (PNG_FOUND)
		    message(STATUS "Use native build of libpng")
		else (PNG_FOUND)
			message(STATUS "Build libpng from source")
			add_subdirectory(zlib)
			add_subdirectory(libpng)
		endif (PNG_FOUND)

		pkg_search_module(GLFW glfw3)
		find_package(OpenGL)
		if (GLFW_FOUND AND OPENGL_FOUND)
			message(STATUS "Use native build of glfw")
			if (APPLE)
				find_library(COCOA_FRAMEWORK Cocoa)
			    find_library(IOKIT_FRAMEWORK IOKit)
			    find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)
			    find_library(CORE_VIDEO_FRAMEWORK CoreVideo)
			    mark_as_advanced(COCOA_FRAMEWORK
			                     IOKIT_FRAMEWORK
			                     CORE_FOUNDATION_FRAMEWORK
			                     CORE_VIDEO_FRAMEWORK)
			    list(APPEND GLFW_LIBRARIES "${COCOA_FRAMEWORK}"
			                               "${OPENGL_gl_LIBRARY}"
			                               "${IOKIT_FRAMEWORK}"
			                               "${CORE_FOUNDATION_FRAMEWORK}"
			                               "${CORE_VIDEO_FRAMEWORK}")
			else (APPLE)
				set(GLFW_INCLUDE_DIRS "${GLFW_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR}")
				set(GLFW_LIBRARIES "${GLFW_LIBRARIES} ${OPENGL_gl_LIBRARY}")
			endif (APPLE)
		else (GLFW_FOUND AND OPENGL_FOUND)
			message(STATUS "Build glfw from source")
			add_subdirectory(GLFW)
		endif (GLFW_FOUND AND OPENGL_FOUND)

		if ((APPLE) AND ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU"))
			# It is a known bug that g++ on OSX only supports libstdc++
			# The jsoncpp installed by brew by default is compiled with libc++
			# If the two libraries are linked together, they break the build
			# https://github.com/open-source-parsers/jsoncpp/issues/597
			# https://github.com/IntelVCL/Open3D/issues/9
			message(STATUS "Build jsoncpp from source")
			add_subdirectory(jsoncpp)
		else ((APPLE) AND ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU"))
			pkg_search_module(JSONCPP jsoncpp>=1.8.0)
			if (JSONCPP_FOUND)
		    	message(STATUS "Use native build of jsoncpp")
			else (JSONCPP_FOUND)
				message(STATUS "Build jsoncpp from source")
				add_subdirectory(jsoncpp)
			endif (JSONCPP_FOUND)
		endif ((APPLE) AND ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU"))
	else (PKGCONFIG_FOUND)
		message(STATUS "Use eigen3 included in Open3D")
		set(EIGEN3_INCLUDE_DIRS "${Open3D_SOURCE_DIR}/External/Eigen")
		message(STATUS "Build libjpeg from source")
		add_subdirectory(libjpeg)
		message(STATUS "Build libpng from source")
		add_subdirectory(zlib)
		add_subdirectory(libpng)
		message(STATUS "Build glfw from source")
		add_subdirectory(GLFW)
		message(STATUS "Build jsoncpp from source")
		add_subdirectory(jsoncpp)
	endif (PKGCONFIG_FOUND)

	message(STATUS "Build tinyfiledialogs from source")
	add_subdirectory(tinyfiledialogs)

	if(Open3D_BUILD_LIBREALSENSE)
		message(STATUS "Build librealsense from source")
		add_subdirectory(librealsense)
	endif(Open3D_BUILD_LIBREALSENSE)

	if (Open3D_BUILD_PYTHON_BINDING)
		add_subdirectory(pybind11)
	endif(Open3D_BUILD_PYTHON_BINDING)

else (Open3D_USE_NATIVE_DEPENDENCY_BUILD)
    message(STATUS "Use eigen3 provided by Conan")
    set(EIGEN3_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_EIGEN})

    if(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glew")
	    message(STATUS "Use GLEW provided by Conan")
	    set(GLEW_FOUND 1)
	    set(GLEW_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_GLEW})
	    set(GLEW_LIBRARIES ${CONAN_LIBS_GLEW})
    endif(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glew")

    if(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glad")
	    message(STATUS "Use GLAD provided by Conan")
	    set(GLAD_FOUND 1)
	    set(GLAD_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_GLAD})
	    set(GLAD_LIBRARIES ${CONAN_LIBS_GLAD})
    endif(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glad")

	message(STATUS "Build libjpeg from source")
	add_subdirectory(libjpeg)
	message(STATUS "Build libpng from source")
	add_subdirectory(zlib)
	add_subdirectory(libpng)

    message(STATUS "Use glfw provided by Conan")
    set(GLFW_FOUND 1)
    set(GLFW_INCLUDE_DIRS ${CONAN_INCLUDE_DIRS_GLFW})
    set(GLFW_LIBRARIES ${CONAN_LIBS_GLFW})
    set(GLFW_LIBRARY_DIRS ${CONAN_LIB_DIRS_GLFW})
    find_package(OpenGL)
    if (APPLE)
        find_library(COCOA_FRAMEWORK Cocoa)
        find_library(IOKIT_FRAMEWORK IOKit)
        find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)
        find_library(CORE_VIDEO_FRAMEWORK CoreVideo)
        mark_as_advanced(COCOA_FRAMEWORK
                         IOKIT_FRAMEWORK
                         CORE_FOUNDATION_FRAMEWORK
                         CORE_VIDEO_FRAMEWORK)
        list(APPEND GLFW_LIBRARIES "${COCOA_FRAMEWORK}"
                                   "${OPENGL_gl_LIBRARY}"
                                   "${IOKIT_FRAMEWORK}"
                                   "${CORE_FOUNDATION_FRAMEWORK}"
                                   "${CORE_VIDEO_FRAMEWORK}")
    else (APPLE)
        set(GLFW_INCLUDE_DIRS "${GLFW_INCLUDE_DIRS}" "${OPENGL_INCLUDE_DIR}")
        set(GLFW_LIBRARIES "${GLFW_LIBRARIES}" "${OPENGL_gl_LIBRARY}")
    endif (APPLE)


	message(STATUS "Build jsoncpp from source")
	add_subdirectory(jsoncpp)
	message(STATUS "Build tinyfiledialogs from source")
	add_subdirectory(tinyfiledialogs)

	if(Open3D_BUILD_LIBREALSENSE)
		message(STATUS "Build librealsense from source")
		add_subdirectory(librealsense)
	endif(Open3D_BUILD_LIBREALSENSE)

	if (Open3D_BUILD_PYTHON_BINDING)
		message(STATUS "Use pybind11 provided by Conan")
		find_package(pybind11 REQUIRED)
		include_directories(${PYTHON_INCLUDE_DIRS})
	endif(Open3D_BUILD_PYTHON_BINDING)
endif(Open3D_USE_NATIVE_DEPENDENCY_BUILD)

# pop everything to root
set(EIGEN3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIRS} PARENT_SCOPE)

if(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glew")
	set(GLEW_INCLUDE_DIRS ${GLEW_INCLUDE_DIRS} PARENT_SCOPE)
	set(GLEW_LIBRARIES ${GLEW_LIBRARIES} PARENT_SCOPE)
endif(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glew")
if(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glad")
	set(GLAD_INCLUDE_DIRS ${GLAD_INCLUDE_DIRS} PARENT_SCOPE)
	set(GLAD_LIBRARIES ${GLAD_LIBRARIES} PARENT_SCOPE)
endif(${OPENGL_EXTENSION_WRAPPER} STREQUAL "glad")

set(GLFW_INCLUDE_DIRS ${GLFW_INCLUDE_DIRS} PARENT_SCOPE)
set(GLFW_LIBRARIES ${GLFW_LIBRARIES} PARENT_SCOPE)
set(GLFW_LIBRARY_DIRS ${GLFW_LIBRARY_DIRS} PARENT_SCOPE)
set(JPEG_INCLUDE_DIR ${JPEG_INCLUDE_DIR} PARENT_SCOPE)
set(JPEG_LIBRARIES ${JPEG_LIBRARIES} PARENT_SCOPE)
set(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRS} PARENT_SCOPE)
set(PNG_LIBRARIES ${PNG_LIBRARIES} PARENT_SCOPE)
set(JSONCPP_INCLUDE_DIRS ${JSONCPP_INCLUDE_DIRS} PARENT_SCOPE)
set(JSONCPP_LIBRARIES ${JSONCPP_LIBRARIES} PARENT_SCOPE)
set(JSONCPP_LIBRARY_DIRS ${JSONCPP_LIBRARY_DIRS} PARENT_SCOPE)
